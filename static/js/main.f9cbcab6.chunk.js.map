{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","INITIAL_STATE","overwrite","currentOperand","previousOperand","reducer","state","includes","evaluate","length","slice","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9cbcab6.chunk.js","sourcesContent":["import { ACTIONS } from './App';\n\nexport default function DigitButton({ dispatch, digit }) {\n  return (\n    <button\n      onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\n    >\n      {digit}\n    </button>\n  );\n}\n","import { ACTIONS } from './App';\n\nexport default function OperationButton({ dispatch, operation }) {\n  return (\n    <button\n      onClick={() =>\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })\n      }\n    >\n      {operation}\n    </button>\n  );\n}\n","import { useReducer } from 'react';\nimport DigitButton from './DigitButton';\nimport OperationButton from './OperationButton';\nimport './App.css';\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate',\n};\n\nconst INITIAL_STATE = {\n  overwrite: false,\n  operation: null,\n  currentOperand: null,\n  previousOperand: null,\n};\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === '0' && state.currentOperand === '0') {\n        return state;\n      }\n      if (payload.digit === '.' && state.currentOperand.includes('.')) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || ''}${payload.digit}`,\n      };\n\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      };\n\n    case ACTIONS.CLEAR:\n      return {\n        ...state,\n        currentOperand: '0',\n        previousOperand: null,\n        operation: null,\n      };\n\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return { ...state, currentOperand: null };\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1),\n      };\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      };\n    default:\n      return state;\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return '';\n  let computation = '';\n  switch (operation) {\n    case '+':\n      computation = prev + current;\n      break;\n\n    case '-':\n      computation = prev - current;\n      break;\n    case '*':\n      computation = prev * current;\n      break;\n    case 'รท':\n      computation = prev / current;\n      break;\n    default:\n      return;\n  }\n  return computation.toString();\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat('en-us', {\n  maximumFractionDigits: 0,\n});\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split('.');\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    INITIAL_STATE\n  );\n\n  return (\n    <div className='main-container'>\n      <div className='calculator-app'>\n        <p className='calc-title'>Electronic Calculator</p>\n        <div className='calculator-grid'>\n          <div className='output'>\n            <div className='previous-operand'>\n              {formatOperand(previousOperand)} {operation}\n            </div>\n            <div className='current-operand'>\n              {formatOperand(currentOperand)}\n            </div>\n          </div>\n          <button\n            className='span-two'\n            onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n          >\n            AC\n          </button>\n          <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\n            DEL\n          </button>\n          <OperationButton operation='รท' dispatch={dispatch} />\n          <DigitButton digit='7' dispatch={dispatch} />\n          <DigitButton digit='8' dispatch={dispatch} />\n          <DigitButton digit='9' dispatch={dispatch} />\n          <OperationButton operation='*' dispatch={dispatch} />\n          <DigitButton digit='4' dispatch={dispatch} />\n          <DigitButton digit='5' dispatch={dispatch} />\n          <DigitButton digit='6' dispatch={dispatch} />\n          <OperationButton operation='+' dispatch={dispatch} />\n          <DigitButton digit='1' dispatch={dispatch} />\n          <DigitButton digit='2' dispatch={dispatch} />\n          <DigitButton digit='3' dispatch={dispatch} />\n          <OperationButton operation='-' dispatch={dispatch} />\n          <DigitButton digit='.' dispatch={dispatch} />\n          <DigitButton digit='0' dispatch={dispatch} />\n          <button\n            className='span-two'\n            onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n          >\n            =\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}